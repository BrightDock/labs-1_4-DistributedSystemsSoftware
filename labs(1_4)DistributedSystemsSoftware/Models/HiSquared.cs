using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace labs_1_4_DistributedSystemsSoftware.Models
{
    public static class HiSquared
    {
        public static double calcVisible(Tuple<double, double> interval, int elementsInInterval, int intervalsCount, double sampleMean, double selectiveQuadratic, int n = 50)
        {
            double result = 0.0;
            double nW = 0.0;

            nW = nWawe(interval, elementsInInterval, intervalsCount, sampleMean, selectiveQuadratic, n);
            result = Math.Pow(elementsInInterval - nW, 2) / nW;

            return result;
        }

        private static double nWawe(Tuple<double, double> interval, int elementsInInterval, int intervalsCount, double sampleMean, double selectiveQuadratic, int n)
        {
            double result = 0.0;

            result = intervalsCount * pi(interval, n, selectiveQuadratic);

            return result;
        }

        private static double pi(Tuple<double, double> interval, int n, double selectiveQuadratic)
        {
            double result = 0.0;
            double h = interval.Item2 - interval.Item1;
            double xI = 0.0;

            for (int i = 0; i < n; i++)
            {
                xI = interval.Item1 + i + 1 + h;
                result += fx(interval, selectiveQuadratic, xI) * h;
            }

            return result;
        }

        private static double fx(Tuple<double, double> interval, double selectiveQuadratic, double xI)
        {
            double result = 0.0;

            result = (1 / (Math.Sqrt(2 * Math.PI) * Math.Sqrt(selectiveQuadratic))) *
                        (Math.Pow(Math.E,
                            -(xI - selectiveQuadratic) / 2 * Math.Pow(selectiveQuadratic, 2)));

            return result;
        }
        public static double calcCritical(int intervalsCount, double sampleMean, double alpha = 0.001)
        {
            double result = 0.0;
            var v = intervalsCount - 2 - 1;

            result = getHiCriticalValue(v, alpha);

            return result;
        }

        private static double[,] hiQuaredTable = new double[,] {
            {0.00016,0.00063,0.00393,0.0158,0.0642,1.642,2.706,3.841,5.412,6.635,10.827 },
            {0.0201,0.0404,0.103,0.211,0.446,3.219,4.605,5.991,7.824,9.210,13.815},
            {0.115,0.185,0.352,0.584,1.005,4.642,6.251,7.815,9.837,11.341,16.268},
            {0.297,0.429,0.711,1.064,1.649,5.989,7.779,9.488,11.668,13.277,18.465},
            {0.554,0.752,1.145,1.610,2.343,7.289,9.236,11.070,13.388,15.086,20.517},
            {0.872,1.134,1.635,2.204,3.070,8.558,10.645,12.592,15.033,16.812,22.457},
            {1.239,1.564,2.167,2.833,3.822,9.803,12.017,14.067,16.622,18.475,24.322},
            {1.646,2.032,2.733,3.490,4.594,11.030,13.362,15.507,18.679,20.090,26.125},
            {2.088,2.532,3.325,4.168,5.380,12.242,14.684,16.919,19.679,21.666,27.877},
            {2.588,3.059,3.940,4.865,6.179,13.442,15.987,18.307,21.161,23.209,29.588},
            {3.053,3.609,4.575,5.578,6.989,14.631,17.275,19.675,22.618,24.725,31.264},
            {3.571,4.178,5.226,6.304,7.807,15.812,18.549,21.026,24.054,26.217,32.909},
            {4.107,4.765,5.892,7.042,8.634,16.985,19.812,22.362,25.472,27.688,34.528},
            {4.660,5.368,6.571,7.790,9.467,18.151,21.064,23.685,26.873,29.141,36.123},
            {5.229,5.985,7.262,8.547,10.307,19.311,22.307,24.996,28.259,30.578,37.697},
            {5.812,6.614,7.962,9.312,11.152,20.465,23.542,26.296,29.633,32.000,39.252},
            {6.408,7.255,8.672,10.085,12.002,21.615,24.769,27.587,30.995,33.409,40.790},
            {7.015,7.906,9.390,10.865,12.857,22.760,25.989,28.869,32.346,34.805,42.312},
            {7.633,8.567,10.117,11.651,13.716,23.900,27.204,30.144,33.687,36.191,43.820},
            {8.260,9.237,10.851,12.443,14.578,25.038,28.412,31.410,35.020,37.566,45.315},
            {8.897,9.915,11.591,13.240,15.445,26.171,29.615,32.671,36.343,38.932,46.797},
            {9.542,10.600,12.338,14.041,16.314,27.301,30.813,33.924,37.659,40.289,48.268},
            {10.196,11.298,13.091,14.848,17.187,28.429,32.007,35.172,38.968,41.638,49.728},
            {10.856,11.992,13.848,15.659,18.062,29.553,33.196,36.415,40.270,42.980,51.179},
            {11.542,12.697,14.611,16.473,18.940,30.675,34.382,37.652,41.566,44.314,52.620},
            {12.198,13.409,15.379,17.292,19.820,31.795,35.563,38.885,42.856,45.642,54.052},
            {12.879,14.125,16.151,18.114,20.703,32.912,86.741,40.113,44.140,46.963,55.476},
            {13.565,14.847,16.928,18.939,21.588,34.027,37.916,41.337,45.419,48.278,56.893},
            {14.256,15.574,17.708,19.768,22.475,35.139,39.087,42.557,46.693,49.588,58.302},
            {14.953,16.306,18.493,20.599,23.364,36.250,40.256,43.773,47.962,50.892,59.703}
        };

        public static double getHiCriticalValue(int degreeOfFreedom, double probabilityV) {
            return hiQuaredTable[degreeOfFreedom - 1, probabilityValueHiCritical.IndexOf(probabilityV)];
        }

        private static List<double> probabilityValueHiCritical = new List<double>() {0.99,0.98,0.95,0.90,0.80,0.20,0.10,0.05,0.02,0.01,0.001 };

        private static double[,] studentTable = new double[,] {
            {0.324920,1.000000,3.077684,6.313752,12.70620,31.82052,63.65674,636.6192},
            {0.288675,0.816497,1.885618,2.919986,4.30265,6.96456,9.92484,31.5991},
            {0.276671,0.764892,1.637744,2.353363,3.18245,4.54070,5.84091,12.9240},
            {0.270722,0.740697,1.533206,2.131847,2.77645,3.74695,4.60409,8.6103},
            {0.267181,0.726687,1.475884,2.015048,2.57058,3.36493,4.03214,6.8688},
            {0.264835,0.717558,1.439756,1.943180,2.44691,3.14267,3.70743,5.9588},
            {0.263167,0.711142,1.414924,1.894579,2.36462,2.99795,3.49948,5.4079},
            {0.261921,0.706387,1.396815,1.859548,2.30600,2.89646,3.35539,5.0413},
            {0.260955,0.702722,1.383029,1.833113,2.26216,2.82144,3.24984,4.7809},
            {0.260185,0.699812,1.372184,1.812461,2.22814,2.76377,3.16927,4.5869},
            {0.259556,0.697445,1.363430,1.795885,2.20099,2.71808,3.10581,4.4370},
            {0.259033,0.695483,1.356217,1.782288,2.17881,2.68100,3.05454,4.3178},
            {0.258591,0.693829,1.350171,1.770933,2.16037,2.65031,3.01228,4.2208},
            {0.258213,0.692417,1.345030,1.761310,2.14479,2.62449,2.97684,4.1405},
            {0.257885,0.691197,1.340606,1.753050,2.13145,2.60248,2.94671,4.0728},
            {0.257599,0.690132,1.336757,1.745884,2.11991,2.58349,2.92078,4.0150},
            {0.257347,0.689195,1.333379,1.739607,2.10982,2.56693,2.89823,3.9651},
            {0.257123,0.688364,1.330391,1.734064,2.10092,2.55238,2.87844,3.9216},
            {0.256923,0.687621,1.327728,1.729133,2.09302,2.53948,2.86093,3.8834},
            {0.256743,0.686954,1.325341,1.724718,2.08596,2.52798,2.84534,3.8495},
            {0.256580,0.686352,1.323188,1.720743,2.07961,2.51765,2.83136,3.8193},
            {0.256432,0.685805,1.321237,1.717144,2.07387,2.50832,2.81876,3.7921},
            {0.256297,0.685306,1.319460,1.713872,2.06866,2.49987,2.80734,3.7676},
            {0.256173,0.684850,1.317836,1.710882,2.06390,2.49216,2.79694,3.7454},
            {0.256060,0.684430,1.316345,1.708141,2.05954,2.48511,2.78744,3.7251},
            {0.255955,0.684043,1.314972,1.705618,2.05553,2.47863,2.77871,3.7066},
            {0.255858,0.683685,1.313703,1.703288,2.05183,2.47266,2.77068,3.6896},
            {0.255768,0.683353,1.312527,1.701131,2.04841,2.46714,2.76326,3.6739},
            {0.255684,0.683044,1.311434,1.699127,2.04523,2.46202,2.75639,3.6594},
            {0.255605,0.682756,1.310415,1.697261,2.04227,2.45726,2.75000,3.6460}
        };

        public static double getStudentTableValue(int degreeOfFreedom, double probabilityV)
        {
            return hiQuaredTable[degreeOfFreedom, probabilityValueStudent.IndexOf(probabilityV)];
        }

        private static List<double> probabilityValueStudent = new List<double>() { 0.40, 0.25, 0.10, 0.05, 0.025, 0.01, 0.005, 0.0005 };
    }
}